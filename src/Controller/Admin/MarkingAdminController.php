<?php
/**
 * Created by PhpStorm.
 * User: temerso_test
 * Date: 26.05.2020
 * Time: 10:48
 */

namespace App\Controller\Admin;


use App\Service\Access\MarkingAccessService;
use App\Entity\Marking;
use App\Service\AdminRouteService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;

class MarkingAdminController extends DefaultAdminController
{
    const ROUTER_CHANGE_STATUS = 'change_status';
    const ROUTER_REMOVE_EXECUTOR = 'remove_executor';

    /**
     * @var MarkingAccessService
     */
    private $accessService;
    /**
     * @var AdminRouteService
     */
    private $adminRoute;

    public function __construct(MarkingAccessService $accessService, AdminRouteService $adminRoute)
    {
        $this->accessService = $accessService;
        $this->adminRoute = $adminRoute;
    }


    /**
     * Смена статуса
     * @see MarkingAdminController::ROUTER_CHANGE_STATUS
     */
    public function changeStatusAction(Marking $marking, EntityManagerInterface $em, Request $request)
    {
        $marking
            ->setStatus((int)$request->get('status'));

        if($comment = $request->get('comment')) {
            $marking->setComment($comment);
        }

        $em->persist($marking);
        $em->flush();

        $url = $this->admin->generateObjectUrl('show', $marking);
        return new RedirectResponse($url);
    }

    /**
     * @see MarkingAdminController::ROUTER_REMOVE_EXECUTOR
     *
     * @param Marking $marking
     * @param EntityManagerInterface $em
     * @return RedirectResponse
     */
    public function removeExecutorAction(Marking $marking, EntityManagerInterface $em)
    {
        $marking
            ->setStatus(Marking::STATUS_CREATED);

        foreach ($marking->getUsers() as $user) {
            $marking->removeUser($user);
        }

        $em->persist($marking);
        $em->flush();

        $url = $this->admin->generateObjectUrl('edit', $marking);
        return new RedirectResponse($url);
    }

    public function showAction($deprecatedId = null)
    {
        $request = $this->getRequest();
        $id = $request->get($this->admin->getIdParameter());
        $object = $this->admin->getObject($id);
        $fields = $this->admin->getShow();
        return $this->renderWithExtraParams('marking/show.html.twig', [
            'action' => 'show',
            'object' => $object,
            'elements' => $fields,
        ], null);
    }

    /**
     * @param Request $request
     * @param object|Marking $object
     * @return \Symfony\Component\HttpFoundation\Response|null
     */
    protected function preEdit(Request $request, $object)
    {
        if ($this->accessService->checkEdit($object->getStatus())) {
            return parent::preEdit($request, $object); // TODO: Change the autogenerated stub
        }

//        $message = sprintf('При статусе "%s" нельзя редактировать', Marking::STATUS_TITLE[$object->getStatus()] ?? $object->getStatus());
//        $this->getRequest()->getSession()->getFlashBag()->add("error", $message);

        $route = $this->adminRoute->getActionRoute(Marking::class, 'show', ['id' => $object->getId()]);
        return new RedirectResponse($route);

    }


}