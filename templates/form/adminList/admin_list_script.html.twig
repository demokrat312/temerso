<script>
    {% autoescape 'js' %}
    const adminListModel = (function () {
        let formId = '{{ id }}'.replace(/\_.+$/, ''); // Уникальный id (s5f265bdcdaf76_cards') убираем _cards
        let $modal = null; // Модальное окно
        let $tableForCardList = null; // Элемент в который добавляем карточки
        let cardListUrl = null; // Ссылка по которой получаем список карточек
        let rowTemplateCreateSub = []; // Переменная для перезаписи rowTemplate из других компонентов
        const emptyRowTemplate = '<tr id="row-empty"><td colspan="3">нет выбранных записей</td></tr>';
        // Строка с карточкой которую вставляем в $tableList
        let rowTemplate = `<tr>
                        <input type="hidden" name="{{ form.vars.full_name }}" value="{id}">
                        <td class="sonata-ba-list-field sonata-ba-list-field-batch">
                            {orderNumber}
                        </td>
                        <td class="sonata-ba-list-field sonata-ba-list-field-text">
                            {title}
                        </td>
                        {otherField}
                        <td class="sonata-ba-list-field sonata-ba-list-field-select">
                            <a class="btn btn-primary" href="#">
                                <i class="fa fa-times" aria-hidden="true"></i>
                                Убрать
                            </a>
                        </td>
                    </tr>`;

        const init = () => {
            $modal = $('#field_dialog_{{ id }}');
            $tableForCardList = $('#table_list_{{ id }}');
            tableEmptyRowToggle();
            console.log('admin_list_script init');
            initEvent();
        };
        const initEvent = () => {
            $(document).on('click', '.js-add-cards', showModal);
            $modal.on('click', '.sonata-filters-box button,.sonata-filters-box a', cardListFilterLinkHandler);
            $modal.on('click', '.sonata-ba-list-field-select', selectCardRow);
            $modal.on('click', '.js-add-selected', selectAllItem);
            $(document).on('click', '.js-card-list .sonata-ba-list-field-select', removeCard)
        };


        /**
         *  Открываем модальное окно и загружаем туда список карточек
         */
        const showModal = (event) => {
            event.preventDefault();
            const $button = $(event.target);
            // Находим таблицу в которую будем добавлять новые карточки
            $tableForCardList = $button.closest('.form-group').find('table');
            // Получаем ссылку для получения списка карточек
            cardListUrl = $button.attr('href');
            loadModalBody(cardListUrl);
        };

        /**
         *  Загружаем контент и добавляем его в модальное окно
         */
        const loadModalBody = (url) => {
            $.ajax({
                type: 'GET',
                url: url,
                dataType: 'html',
                success: function (html) {
                    $modal.find('.modal-body').html(html);
                    $modal.modal('show');
                    Admin.shared_setup($modal);
                    batchScript();
                    removeDuplicate();
                    modalLinkHandle($modal.find('.modal-body').find('.sonata-ba-list-field-header'));
                }
            });
        };

        /**
         * Перехватываем ссылки из фильтра карточек
         */
        const cardListFilterLinkHandler = (event) => {
            event.preventDefault();
            const $buttonFilter = $(event.target);
            let url = null;
            // Проверяем, что нажатая кнопка это кнопка фильтрации
            if ($buttonFilter.find('.fa-filter').length) {
                url = cardListUrl + '?' + serializeInputsFromElement($modal.find('.sonata-filters-box'))
            } else if ($buttonFilter.attr('href') && $buttonFilter.attr('href').length > 1) {
                url = $buttonFilter.attr('href');
            } else {
                return false;
            }

            loadModalBody(url);
        };

        /**
         * Получаем поля из выбранного элмента и кодируем
         */
        const serializeInputsFromElement = (selector) => {
            return $(selector).prop('elements', $('*', selector).andSelf().get()).serialize();
        };

        /**
         * Выбираем запись из модального окна и добавляем в таблицу
         */
        const selectCardRow = (event) => {
            event.preventDefault();

            const $row = $(event.target).closest('tr');

            addCard($row);
        };

        /**
         * Копируем дополнительные поля из модального окна и добавляем в таблицу
         */
        const addOtherField = ($newRow) => {
            let otherFieldTdList = ''; // html полей

            // В модальном окне находим поля которые нужно перенести в таблице по ключю js-admin-list-other-field
            $newRow.find('.js-admin-list-other-field').each((index, htmlElement) => {
                const $field = $(htmlElement);
                const title = $field.find('.js-admin-list-other-field-info').data('title');

                // В таблцу добавляем заголовок поля(<th>), если его нет
                if($tableForCardList.find('.sonata-ba-list-field-header').find(':contains(' + title +')').length === 0) {
                    $tableForCardList.find('.sonata-ba-list-field-header-select').before($('<th class="sonata-ba-list-field-header-text">' + title +'</th>'));
                }

                // Вытаскиваем все поля из элемента, убираем плагины если они есть
                let fieldHtml = '';
                $field.find('[name]').each((index, input) =>  {
                    const $input = $(input);
                    if($input.is(':checkbox')) {
                        $input.iCheck('destroy');
                        if($input.is(':checked')) $input.attr('checked', 'checked');
                    }
                    fieldHtml += $input.wrap('<p/>').parent().html();
                });

                otherFieldTdList += '<td class="sonata-ba-list-field sonata-ba-list-field-text">' + fieldHtml + '</td>';
            });

            return otherFieldTdList;
        };

        /**
         * Добавляем выбранную строку из модального окна в таблицу
         */
        const addCard = ($row) => {
            const cardId = $row.find('[objectid]:first').attr('objectid');
            const title = $row.find('td:eq(' + $('.js-field-general-name').index() + ')').text().trim();

            // Перезаписываем шаблон из другого компонента
            const rowTemplateUpdated = setRowTemplateParam(rowTemplate);

            // Добавляем дополнительные поля
            const otherFieldTemplate = addOtherField($row);

            // Заменяем переменные
            const $newRow = $(rowTemplateUpdated
                .replace('{otherField}', otherFieldTemplate)
                .replace(/{id}/g, cardId)
                .replace(/{formId}/g, formId)
                .replace('{orderNumber}', $tableForCardList.find('tbody tr:not(#row-empty)').length + 1)
                .replace('{title}', title)
            );

            $tableForCardList.find('tbody').append($newRow); // Добавляем в таблицу
            $row.remove(); // Удаляем из модального окна

            tableEmptyRowToggle(); // Проверяем таблицу на наличие записей
            closeModalOnEmpty();
        };

        /**
         * Выбираем все карточки из модального окна
         */
        const selectAllItem = (event) => {
            event.preventDefault();

            // Находим в модальном окне таблицу с карточками
            getTableListLoaded().find('tbody tr').each((index, tr) => {
                const $cardRow = $(tr);
                if ($cardRow.find('input:checkbox:checked').length) {
                    addCard($(tr));
                }
            });
            $modal.modal('hide');
        };

        /**
         * checkbox для выбора карточек
         * Добавляем плагин iCheck
         */
        const batchScript = () => {
            // Toggle individual checkboxes when the batch checkbox is changed
            const $checboxAll = $modal.find('#list_batch_checkbox');
            // Убираем события
            $checboxAll.unbind();
            $checboxAll.on('ifChanged change', function () {
                var checkboxes = $(this)
                    .closest('table')
                    // .find('td.sonata-ba-list-field-batch input[type="checkbox"], div.sonata-ba-list-field-batch input[type="checkbox"]')
                    .find('[name="idx[]"]')
                ;

                if (Admin.get_config('USE_ICHECK')) {
                    checkboxes.iCheck($(this).is(':checked') ? 'check' : 'uncheck');
                } else {
                    checkboxes.prop('checked', this.checked);
                }
            });

            // Add a CSS class to rows when they are selected
            $modal.find('td.sonata-ba-list-field-batch input[type="checkbox"], div.sonata-ba-list-field-batch input[type="checkbox"]')
                .on('ifChanged change', function () {
                    $(this)
                        .closest('tr, div.sonata-ba-list-field-batch')
                        .toggleClass('sonata-ba-list-row-selected', $(this).is(':checked'))
                    ;
                })
                .trigger('ifChanged')
            ;
        };

        /**
         * Удаляем из модального окна карточки которые уже есть в таблице
         * Проверяем по cardId(objectid)
         */
        const removeDuplicate = () => {
            const recordList = [];
            $('.js-card-list').each((index, table) => {
                $(table).find('input').each((index, input) => {
                    recordList.push(input.value);
                });
            });

            getTableListLoaded().find('tr').each((index, tr) => {
                const $tr = $(tr);
                if (recordList.includes($tr.find('td:first').attr('objectid'))) {
                    $tr.remove();
                }
            })
        };

        /**
         * Удаляем карточку из таблицы
         */
        const removeCard = (event) => {
            event.preventDefault();

            const $buttonRemove = $(event.target);
            $tableForCardList = $buttonRemove.closest('.form-group').find('table');
            $buttonRemove.closest('tr').remove();

            tableEmptyRowToggle();
        };

        /**
         * Добавление и удаление "нет выбранных записей"
         */
        const tableEmptyRowToggle = () => {
            if(!$tableForCardList.length)return;

            const rowCount = $tableForCardList.find('tbody').find('tr').length;
            if(rowCount > 1) {
                $tableForCardList.find('#row-empty').remove();
            }else if(rowCount === 0) {
                $tableForCardList.find('tbody').append(emptyRowTemplate);
            }
        };

        /**
         * Если мадальное пустое, то закрываем его
         */
        const closeModalOnEmpty = () => {
            if($modal.find('.modal-body table tbody').find('tr').length === 0) {
                $modal.modal('hide');
            }
        };

        /**
         * Находим таблицу с карточками в модальном окне
         * @returns {*}
         */
        const getTableListLoaded = () => {
            return $modal.find('.sonata-ba-list');
        };

        /**
         * Перезаписываем таблицу для карточек(нужно для перезаписи из других компонентов)
         * @param $newTableList
         */
        const setTableList = ($newTableList) => {
            $tableForCardList = $newTableList;
            tableEmptyRowToggle();
        };

        /**
         * Задаем новый шаблона для сторки с карточкой(нужно для перезаписи из других компонентов)
         * @param newRowTemplate
         */
        const setRowTemplate = (newRowTemplate) => {
            rowTemplate = newRowTemplate;
        };

        // для перезапись из другого модуля
        const setRowTemplateParam = (rowTemplate) => {
            rowTemplateCreateSub.forEach((sub) => {
                rowTemplate = sub(rowTemplate, $tableForCardList);
            });
            return rowTemplate;
        };

        // Перехватываем все ссылки нажатые в модальном окне(или переданом элементе)
        const modalLinkHandle = ($modal) => {

            $modal.find('[href]').each(function(index, linkElement) {
                if(linkElement.href.includes('/')) {
                    $(linkElement).click((event) => {
                        event.preventDefault();
                        const link = event.target.getAttribute('href');
                        loadModalBody(link);
                    })
                }
            });
        };

        return {init, setTableList, setRowTemplate, rowTemplateCreateSub}
    })();
    window.addEventListener("load", function () {
        adminListModel.init();
    });
    {% endautoescape %}
</script>