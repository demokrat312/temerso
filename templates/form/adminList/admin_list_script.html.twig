<script>
    {% autoescape 'js' %}
    const adminListModel = (function () {
        // s5eca959083ae6[cards][]
        let formId = '{{ id }}'.replace(/\_.+$/, '');
        let $modal = null;
        let $tableList = null;
        let listUrl = null;
        let rowTemplateCreateSub = [];
        const emptyRowTemplate = '<tr id="row-empty"><td colspan="3">Нету выбранных записей</td></tr>';
        let rowTemplate = `<tr>
                        <input type="hidden" name="{{ form.vars.full_name }}" value="{id}">
                        <td class="sonata-ba-list-field sonata-ba-list-field-batch">
                            {orderNumber}
                        </td>
                        <td class="sonata-ba-list-field sonata-ba-list-field-text">
                            {title}
                        </td>
                        {otherField}
                        <td class="sonata-ba-list-field sonata-ba-list-field-select">
                            <a class="btn btn-primary" href="#">
                                <i class="fa fa-times" aria-hidden="true"></i>
                                Убрать
                            </a>
                        </td>
                    </tr>`;

        const init = () => {
            $modal = $('#field_dialog_{{ id }}');
            $tableList = $('#table_list_{{ id }}');
            tableEmptyRowToggle();
            console.log('admin_list_script init');
            initEvent();
        };
        const initEvent = () => {
            $(document).on('click', '.js-add-cards', showModal);
            $modal.on('click', '.sonata-filters-box button,.sonata-filters-box a', modalActions);
            $modal.on('click', '.sonata-ba-list-field-select', selectItem);
            $modal.on('click', '.js-add-selected', selectAllItem);
            $(document).on('click', '.js-card-list .sonata-ba-list-field-select', removeItem)
        };
        const showModal = (event) => {
            event.preventDefault();
            const $target = $(event.target);
            $tableList = $target.closest('.form-group').find('table');
            console.log('table list = ', $tableList);
            listUrl = $target.attr('href');
            loadModalBody(listUrl);
        };

        const loadModalBody = (url) => {
            $.ajax({
                type: 'GET',
                url: url,
                dataType: 'html',
                success: function (html) {
                    $modal.find('.modal-body').html(html);
                    $modal.modal('show');
                    Admin.shared_setup($modal);
                    batchScript();
                    removeDuplicate();
                    modalLinkHandle($modal.find('.modal-body').find('.sonata-ba-list-field-header'));
                }
            });
        };

        const modalActions = (event) => {
            event.preventDefault();
            const $target = $(event.target);
            let url = null;
            // Кнопка фильтрации
            if ($target.find('.fa-filter').length) {
                url = listUrl + '?' + serializeInputsFromElement($modal.find('.sonata-filters-box'))
            } else if ($target.attr('href') && $target.attr('href').length > 1) {
                url = $target.attr('href');
            } else {
                return false;
            }

            loadModalBody(url);
        };

        const serializeInputsFromElement = (selector) => {
            return $(selector).prop('elements', $('*', selector).andSelf().get()).serialize();
        };

        const selectItem = (event) => {
            event.preventDefault();

            const $row = $(event.target).closest('tr');

            addItem($row);
        };

        const addOtherField = ($newRow) => {
            let otherFieldTr = '';
            $newRow.find('.js-admin-list-other-field').each((index, htmlElement) => {
                const $fields = $(htmlElement);
                const title = $fields.find('.js-admin-list-other-field-info').data('title');
                if($tableList.find('.sonata-ba-list-field-header').find(':contains(' + title +')').length === 0) {
                    $tableList.find('.sonata-ba-list-field-header-select').before($('<th class="sonata-ba-list-field-header-text">' + title +'</th>'));
                }
                let fieldsHtml = '';
                $fields.find('[name]').each((index, input) =>  {
                    const $input = $(input);
                    if($input.is(':checkbox:checked')) {
                        $input.iCheck('destroy');
                        $input.attr('checked', 'checked');
                    }
                    fieldsHtml += $input.wrap('<p/>').parent().html();
                });
                otherFieldTr += '<td class="sonata-ba-list-field sonata-ba-list-field-text">' + fieldsHtml + '</td>';
            });

            return otherFieldTr;
        };

        const addItem = ($row) => {
            const id = $row.find('.sonata-ba-list-field-batch').attr('objectid');
            const title = $row.find('td:eq(' + $('.js-field-general-name').index() + ')').text().trim();

            const rowTemplateUpdated = setRowTemplateParam(rowTemplate);

            const otherFieldTemplate = addOtherField($row);

            const $newRow = $(rowTemplateUpdated
                .replace('{otherField}', otherFieldTemplate)
                .replace(/{id}/g, id)
                .replace(/{formId}/g, formId)
                .replace('{orderNumber}', $tableList.find('tbody tr:not(#row-empty)').length + 1)
                .replace('{title}', title)
            );

            console.log('addItem');
            $tableList.find('tbody').append($newRow);
            $row.remove();

            tableEmptyRowToggle();
            closeModalOnEmpty();
        };

        const selectAllItem = (event) => {
            event.preventDefault();

            getTableListLoaded().find('tbody tr').each((index, tr) => {
                const $row = $(tr);
                if ($row.find('input:checkbox:checked').length) {
                    addItem($(tr));
                }
            });
            $modal.modal('hide');
        };

        const batchScript = () => {
            // Toggle individual checkboxes when the batch checkbox is changed
            $modal.find('#list_batch_checkbox').on('ifChanged change', function () {
                var checkboxes = $(this)
                    .closest('table')
                    .find('td.sonata-ba-list-field-batch input[type="checkbox"], div.sonata-ba-list-field-batch input[type="checkbox"]')
                ;

                if (Admin.get_config('USE_ICHECK')) {
                    checkboxes.iCheck($(this).is(':checked') ? 'check' : 'uncheck');
                } else {
                    checkboxes.prop('checked', this.checked);
                }
            });

            // Add a CSS class to rows when they are selected
            $modal.find('td.sonata-ba-list-field-batch input[type="checkbox"], div.sonata-ba-list-field-batch input[type="checkbox"]')
                .on('ifChanged change', function () {
                    $(this)
                        .closest('tr, div.sonata-ba-list-field-batch')
                        .toggleClass('sonata-ba-list-row-selected', $(this).is(':checked'))
                    ;
                })
                .trigger('ifChanged')
            ;
        };

        const removeDuplicate = () => {
            const recordList = [];
            $('.js-card-list').each((index, table) => {
                $(table).find('input').each((index, input) => {
                    recordList.push(input.value);
                });
            });

            getTableListLoaded().find('tr').each((index, tr) => {
                const $tr = $(tr);
                if (recordList.includes($tr.find('td:first').attr('objectid'))) {
                    $tr.remove();
                }
            })
        };

        const removeItem = (event) => {
            event.preventDefault();

            const $target = $(event.target);
            $tableList = $target.closest('.form-group').find('table');
            console.log('table list = ', $tableList);
            $target.closest('tr').remove();

            tableEmptyRowToggle();
        };

        /**
         * Добавление и удаление "Нету выбранных записей"
         */
        const tableEmptyRowToggle = () => {
            if(!$tableList.length)return;

            const rowCount = $tableList.find('tbody').find('tr').length;
            if(rowCount > 1) {
                $tableList.find('#row-empty').remove();
            }else if(rowCount === 0) {
                $tableList.find('tbody').append(emptyRowTemplate);
            }
        };

        /**
         * Если мадальное пустое, то закрываем его
         */
        const closeModalOnEmpty = () => {
            if($modal.find('.modal-body table tbody').find('tr').length === 0) {
                $modal.modal('hide');
            }
        };

        const getTableListLoaded = () => {
            return $modal.find('.sonata-ba-list');
        };

        const setTableList = ($newTableList) => {
            console.log('setTableList');
            $tableList = $newTableList;
            console.log('table list = ', $tableList);
            tableEmptyRowToggle();
        };

        const setRowTemplate = (newRowTemplate) => {
            rowTemplate = newRowTemplate;
        };

        // для перезапись из другого модуля
        const setRowTemplateParam = (rowTemplate) => {
            rowTemplateCreateSub.forEach((sub) => {
                rowTemplate = sub(rowTemplate, $tableList);
            });
            return rowTemplate;
        };

        // Перехватываем все ссылки нажатые в модальном окне
        const modalLinkHandle = ($modal) => {

            $modal.find('[href]').each(function(index, linkElement) {
                console.log(linkElement.href);
                if(linkElement.href.includes('/')) {
                    $(linkElement).click((event) => {
                        event.preventDefault();
                        const link = event.target.getAttribute('href');
                        loadModalBody(link);
                    })
                }
            });
        };

        return {init, setTableList, setRowTemplate, rowTemplateCreateSub}
    })();
    window.addEventListener("load", function () {
        adminListModel.init();
    });
    {% endautoescape %}
</script>